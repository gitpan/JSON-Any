NAME
    JSON::Any - Wrapper Class for the various JSON classes.

VERSION
    Version 1.01

SYNOPSIS
    This module will provide a coherent API to bring together the various
    JSON modules currently on CPAN. This module will allow you to code to
    any JSON API and have it work regardless of which JSON module is
    actually installed.

            use JSON::Any;

            my $j = JSON::Any->new;

            $json = $j->objToJson({foo=>'bar', baz=>'quux'});
            $obj = $j->jsonToObj($json);

    or

            $json = $j->encode({foo=>'bar', baz=>'quux'});
            $obj = $j->decode($json);

    or

            $json = $j->Dump({foo=>'bar', baz=>'quux'});
            $obj = $j->Load($json);

    or

            $json = $j->to_json({foo=>'bar', baz=>'quux'});
            $obj = $j->from_json($json);

    or without creating an object:

            $json = JSON::Any->objToJson({foo=>'bar', baz=>'quux'});
            $obj = JSON::Any->jsonToObj($json);

    On load, JSON::Any will find a valid JSON module in your @INC by looking
    for them in this order:

            JSON::XS 
            JSON 
            JSON::DWIW 
            JSON::Syck

    And loading the first one it finds.

    You may change the order by specifying it on the "use JSON::Any" line:

            use JSON::Any qw(DWIW Syck XS JSON);
        
    Specifying an order that is missing one of the modules will prevent that
    module from being used:

            use JSON::Any qw(DWIW XS JSON);

    This will check in that order, and will never attempt to load
    JSON::Syck.

FUNCTIONS
    "new"
    Will take any of the parameters for the underlying system and pass them
    through. However these values don't map between JSON modules, so, from a
    portability standpoint this is really only helpful for those paramters
    that happen to have the same name. This will be addressed in a future
    release.

    "handlerType"
    Takes no arguments, returns a string indicating which JSON Module is in
    use.

    "handler"
    Takes no arguments, if called on an object returns the internal JSON::*
    object in use. Otherwise returns the JSON::* package we are using for
    class methods.

    "objToJson"
    Takes a single argument, a hashref to be converted into JSON. It returns
    the JSON text in a scalar.

    "to_json"
    "Dump"
    "encode"
    Aliases for objToJson, can be used interchangeably, regardless of the
    underlying JSON module.

    "jsonToObj"
    Takes a single argument, a string of JSON text to be converted back into
    a hashref.

    "from_json"
    "Load"
    "decode"
    Aliases for jsonToObj, can be used interchangeably, regardless of the
    underlying JSON module.

AUTHOR
    Chris Thompson, "<cthom at cpan.org>"

BUGS
    Please report any bugs or feature requests to "bug-json-any at
    rt.cpan.org", or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=JSON-Any>. I will be
    notified, and then you'll automatically be notified of progress on your
    bug as I make changes.

ACKNOWLEDGEMENTS
    This module came about after discussions on irc.perl.org about the fact
    that there were now six separate JSON perl modules with different
    interfaces.

    In the spirit of Class::Any, JSON::Any was created with the considerable
    help of Chris 'perigrin' Prather, and Matt 'mst' Trout.

    JSON::Any 1.01 was written almost entirely by Chris Prather.

    San Dimas High School Football Rules!

COPYRIGHT & LICENSE
    Copyright 2007 Chris Thompson, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

